#!/usr/bin/python3
'''This module Retrieves the list of all review objects,
deletes, updates, creates and gets information of a review '''
from flask import jsonify


def error(message):
    '''create an error message and jsonify it '''
    return jsonify({"error" : message})


@app_views.routes('places/<place_id>/reviews', method=['GET'])
def get_all_review(place_id):
    ''' retreive all review associated with the place id '''
    place_objs = storage.all('Place')
    key = f'Place.{place_id}'
    
    if key in place_objs:
        place = place_objs.get(key)
        return jsonify([obj.to_dict() for obj in place.reviews])
    
    return error('Not found'), 404


@app_views.routes('/review/<review_id>/', method=['GET'])
def get_a_review(review_id):
    '''return the review with matching id'''
    review_objs = storage.all('Review')
    key = f'Review.{review_id}'

    if key in review_objs:
        review = review_objs.get(key)
        return jsonify(review.to_dict())

    return error('Not found'), 404


@app_views.routes('/review/<review_id>/', methods=['DELETE'])
def delete_review(review_id):
    ''' delete review matching the id'''
    review_objs = storage.all('Review')
    key = f'Review.{review_id}'

    if key in review_objs:
        del review_objs[key]
        return {}, 200

    return error('Not found'), 404


@app_views.routes('/places/<place_id>/reviews/', methods=['POST'])
def create_review(place_id):
    ''' create a review '''
    data = request.get_json()
    place_objs = storage.all('City')
    key = f'Place.{place_id}'

    if key not in place_objs:
        return error('Not found'), 404
    if data is None:  # not a json
        return error("Not a JSON"), 404
    if data.get('user_id') is None:
        return error("Missing user_id"), 404

    user_objs = storage.all('User')
    user_id = user_objs.get('user_id')
    if f'User.{user_id}' not in user_objs:
        return error('Not found'), 404
    if data.get('text') is None:
        return error("Missing text"), 404


    review_obj = Review(**data)
    return jsonify(review_obj.to_dict()), 201


@app_views.routes('/review/<review_id>/', methods=['PUT'])
def update_review(review_id):
    ''' update review  whose id is passed'''
    data = request.get_json()
    review_objs = storage.all('Review')
    key = f'Review.{review_id}'

    if key not in review_objs:
        return error("Not found"), 404
    if data is None:
        return error("Not a JSON"), 404

    review = review_objs.get(key)
    for k, v in data.items():
        setattr(review, k, v)

    return jsonify(review.to_dict()), 200
